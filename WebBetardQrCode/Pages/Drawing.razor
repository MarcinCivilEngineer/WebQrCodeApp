@page "/Drawing/{OrderId}/{DrawingName}"
@using WebBetardQRCodeLib.DataAccess
@using WebBetardQRCodeLib.Models
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using QRCoder
@using System.Drawing
@using System
@using Microsoft.AspNetCore.Components;

@using System.IO;

@inject IOrderData orderData
@inject NavigationManager navManager

<h1>Informacje o rysunku</h1>


<div>
    <button class="btn btn-secondary" @onclick="(()=>GoBack())">Wróć</button>
    <button class="btn btn-primary" @onclick="(()=>GenerateQRCode())">Generuj kod QR</button>
</div>

<div class="container">
    @if (order is not null)
    {
        <div class="row font-weight-bold text-white">
            <div>
                @order.NumberBET
            </div>
            <div>
                @order.Name
            </div>
        </div>
    }
</div>

@if (drawing is not null)
{

<div class="container" style="width: 700px; padding: 5px ">


    <div class="row bg-secondary font-weight-bold text-white rounded-top" style="padding:5px">
        Nazwa rysunku
    </div>
    <div class="row bg-light font-weight-bold">
        @order.NumberBET @order.Name  
    </div>
    <div class="row bg-light font-weight-bold h4">
       @drawing.Name
    </div>


</div>
    <div class="container" style="width: 700px; padding: 5px ">
            <div class="row bg-secondary font-weight-bold text-white rounded-top" style="padding:5px">
                Wydania rysunków
            </div>
            @foreach (var revision in drawing.DrawingRevision.OrderByDescending(x => x.Data))
            {
                <div class="row bg-light">
                    <div class="col 10 text-right">@revision.Data</div>
                    <div class="col 15">@revision.Symbol</div>
                    <div class="col">@revision.Text</div>
                </div>
            }
        </div>

        <div class="container" style="width: 700px; padding: 5px ">
            <div class="row bg-secondary font-weight-bold text-white rounded-top" style="padding:5px">
                Zmiany statusu
            </div>
            @foreach (var statuses in drawing.DrawingStatus.OrderByDescending(x => x.Data))
            {
                <div class="row bg-light">
                    <div class="col 10 text-right">@statuses.Data</div>
                    <div class="col 15">@statuses.DrawingStatusType.Text</div>
                    <div class="col">@statuses.User.Function</div>
                </div>
            }
        </div>


        <div class="container" style="width: 700px; padding: 5px">
            <div class="row bg-secondary font-weight-bold text-white rounded-top" style="padding:5px">
                Komentarze
            </div>
            @foreach (var comment in drawing.Comments.OrderByDescending(x => x.Data))
            {
        <div class="row bg-light">
            <div class="col 10 text-right">@comment.Data</div>
            <div class="col 15">@comment.Text</div>
            <div class="col 10 text-right">
                @if (comment.Src is not null)
                {
                    @if (comment.Src != "")
                    {
                        <a href="@comment.Src" target="_blank"><span class="oi oi-spreadsheet" /></a>
                    }
                }
            </div>
            <div class="col">@comment.CommentUser.Name @comment.CommentUser.Mail @comment.CommentUser.Phone @comment.CommentUser.Company</div>
        </div>
            }
        </div>




    <div>
        <button class="btn btn-primary" @onclick="(()=>OnClickCreateComment())">Wprowadź komentarz</button>
        <button class="btn btn-primary" @onclick="(()=>OnClickCreateRevision())">Wprowadź wydanie rysunku</button>
        <button class="btn btn-primary" @onclick="(()=>OnClickCreateStatus())">Wprowadź status</button>
    </div>

    @if (qrCodeImage is not null)
    {
        <div class="container text-center">
            <img src="@Image64">
        </div>
    }
    }



    @code {
        [Parameter]
        public string OrderId { get; set; }

        [Parameter]
        public string DrawingName { get; set; }

        public Bitmap qrCodeImage;
        protected string Image64 { get; set; }

        private OrderModel order;
        private DrawingModel drawing;



        protected async override Task OnInitializedAsync()
        {
            order = await orderData.GetOrdersAsync(OrderId);
            drawing = order.Drawings.FirstOrDefault(x => x.Name == DrawingName);
        }

        protected async override Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {

            }
        }
        private void GoBack()
        {
            navManager.NavigateTo($"/Order/{OrderId}");
        }

        private void OnClickCreateComment()
        {
            navManager.NavigateTo(@$"/DrawingCommentCreate/{order.Id}/{drawing.Name}");
        }

        private void OnClickCreateStatus()
        {
            navManager.NavigateTo(@$"/DrawingStatusCreate/{order.Id}/{drawing.Name}");
        }

        private void OnClickCreateRevision()
        {
            navManager.NavigateTo(@$"/DrawingRevisionCreate/{order.Id}/{drawing.Name}");
        }


        private void GenerateQRCode()
        {

            string text = "";

            //var drawing = orderOne.Drawings.FirstOrDefault(x => x.Name == drawingName);

            string revision = "";
            if (drawing.DrawingRevision?.Count > 0)
            {
                revision = drawing.DrawingRevision.OrderByDescending(x => x.Data).FirstOrDefault().Symbol;
                text = OrderId + '/' + drawing.Name + '/' + revision;
            }
            else
            {
                text = OrderId + '/' + drawing.Name;
            }
            QRCodeGenerator qrGenerator = new QRCodeGenerator();
            QRCodeData qrCodeData = qrGenerator.CreateQrCode(text, QRCodeGenerator.ECCLevel.Q);
            QRCode qrCode = new QRCode(qrCodeData);

            qrCodeImage = qrCode.GetGraphic(10);

            MemoryStream outStream = new MemoryStream();
            System.Drawing.Image bitmap = qrCodeImage;

            Font font = new Font("Arial", 20, FontStyle.Bold, GraphicsUnit.Pixel);
            Color color = Color.Black;
            Point atpoint = new Point(qrCodeImage.Width / 2, qrCodeImage.Height - 20);
            SolidBrush brush = new SolidBrush(color);
            Graphics graphics = Graphics.FromImage(qrCodeImage);
            StringFormat sf = new StringFormat();
            sf.Alignment = StringAlignment.Center;
            sf.LineAlignment = StringAlignment.Center;
            graphics.DrawString($"{order.NumberBET} {drawing.Name} {revision}", font, brush, atpoint, sf);
            graphics.Dispose();

            bitmap.Save(outStream, System.Drawing.Imaging.ImageFormat.Png);

            //qrCodeImage.Save(outStream, System.Drawing.Imaging.ImageFormat.Png);
            Image64 = ("data:image/png;base64, " + Convert.ToBase64String(outStream.ToArray()));
        }
    }
